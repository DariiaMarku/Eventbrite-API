using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EventbriteNET;
using System.Net.Http;
using System.Net;
using System.IO;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Data.SqlClient;
using System.Data;

namespace EventbriteCSharp
{

    class EventBrite
    {
        static void Main(string[] args)
        {
            var locat = 1;
            double lat = 38.9339;
            double longt = -77.1773;
            var stDate = "2017-07-20T09:42:54Z";
            var endDate = "2017-07-22T09:42:54Z";
            var token = "2NEWI72RJPV4KP2G64V3";
            var data = GetData(locat, lat, longt, stDate, endDate, token);
            var datares = ReturnListModel(locat, lat, longt, stDate, endDate, token);
            Console.ReadKey();
        }

        public static IList <PopulationDencityModel>  ReturnListModel (int locat, double lat, double longt, string stDate, string endDate, string token)
        {
            /*
            declare @num_hours int; 
            set @num_hours = 5; 

            select dateadd(HOUR, @num_hours, getdate()) as time_added, 
            getdate() as curr_date  
            */

            SqlConnection conn = new SqlConnection(@"Server= LAPTOP-JDV1D5J5\SQLEXPRESS; Database=EventBriteData; User Id=sa; Password = 1234;");
            //SELECT * FROM EventBTable;
            string querySelect = string.Format( "SELECT * FROM EventBTable;");
            /*  "Declare @stdatetime datetime=" + stDate + ";" + "SELECT * FROM EventBTable" +
                "Where" +  "@stdatetime between EBTimeStart and  EBTimeEnd;"
            /*
             Declare @stdatetime datetime='2017-07-20 15:00:00';

SELECT * FROM EventBTable Where  @stdatetime between EBTimeStart and  EBTimeEnd;

             */
            SqlCommand cmd = new SqlCommand(querySelect, conn);
            conn.Open();

            // create data adapter
            SqlDataAdapter dataAdapt = new SqlDataAdapter(cmd);

            //query your database and return the result to your datatable
            DataTable dataTable = new DataTable();
            dataAdapt.Fill(dataTable);
         /*   foreach (DataRow dataRow in dataTable.Rows)
            {
                foreach (var item in dataRow.ItemArray)
                {
                    //Console.WriteLine(item);
                }
            }*/
            conn.Close();
            dataAdapt.Dispose();

            var popupDens = dataTable.MapTableToList<PopulationDencityModel>();
            Console.WriteLine("Selecting Data Successfully");
            return popupDens;
           /* foreach (PopulationDencityModel item in popupDens)
            {
                Console.WriteLine("{0}:{1}:{2}:{3}:{4}:{5}:{6}", item.ID, item.EBLongt, item.EBLat, item.EBTimeStart, item.EBTimeEnd, item.EBPopulation, item.EBSource);
            }*/

        }


        public static string[] GetData(int locat, double lat, double longt, string stDate, string endDate, string token)
        {
            //https://www.eventbriteapi.com/v3/events/search/?expand=venue,location.within=100mi&location.latitude=38.9339&location.longitude=-77.1773&start_date.range_start=2017-07-19T09%3A42%3A54Z&&token=2NEWI72RJPV4KP2G64V3
            string url = "https://www.eventbriteapi.com/v3/events/search/?expand=venue," + "location.within=" + locat + "mi" + "&location.latitude=" + lat + "&location.longitude="
               + longt + "&start_date.range_start=" + stDate + "&start_date.range_end=" + endDate + "&token=" + token;
            // Creating an object of WebClient 
            using (var webClient = new WebClient())
            {
                // Give the key to get acces 
                webClient.Headers.Add("Authorization", "Bearer 2NEWI72RJPV4KP2G64V3");
                //Execute the query at the provided address and get a response from Eventbrite API as a string
                string response = webClient.DownloadString(url);

                //Connect to database, where the data will be stored
                SqlConnection conn = new SqlConnection(@"Server= LAPTOP-JDV1D5J5\SQLEXPRESS; Database=EventBriteData; User Id=sa; Password = 1234;");
                conn.Open();

                //extracting capacity, startdate & enddate
                var capacity = JObject.Parse(response)["events"].Select(v => (int)v["capacity"]).ToList();
                var timeStart = JObject.Parse(response)["events"].Select(v => (DateTime)v["start"]["local"]).ToList();
                var timeEnd = JObject.Parse(response)["events"].Select(v => (DateTime)v["end"]["local"]).ToList();
                var venueId = JObject.Parse(response)["events"].Select(v => (int)v["venue_id"]).ToList();
                var venueLat = JObject.Parse(response)["events"].Select(v => (double)v["venue"]["address"]["latitude"]).ToList();
                var venueLongt = JObject.Parse(response)["events"].Select(v => (double)v["venue"]["address"]["longitude"]).ToList();

                string[] respArr = new string[capacity.Count];

                // Recording received elements to SLQ 
                for (int i = 0; i < capacity.Count; i++)
                {
                    respArr[i] = (" date & time start " + timeStart[i] + " date & time end " + timeEnd[i] + " lat = " + lat + " longt = " + longt + " people = " + capacity[i]);

                    string queryInsert = "INSERT into EventBTable (EBLat, EBLongt, EBTimeStart, EBTimeEnd, EBPopulation, EBSource, EBVenueID )" +
                                   "VALUES (" + venueLat[i] + ", " + venueLongt[i] + ", '" + timeStart[i].ToString("yyyy-MM-dd HH:mm:ss") + "', '" + timeEnd[i].ToString("yyyy-MM-dd HH:mm:ss") + "', " + capacity[i] + ", " + "3, " + venueId[i] + ")";

                    SqlCommand cmd = new SqlCommand(queryInsert, conn);
                    cmd.ExecuteNonQuery();                 
                }

                Console.WriteLine("Inserting Data Successfully");
                conn.Close();
                return respArr;
            }

            
        }
    }

    public class PopulationDencityModel
    {
        public int ID { get; set; }
        public double EBLat { get; set; }
        public double EBLongt { get; set; }
        public DateTime EBTimeStart { get; set; }
        public DateTime EBTimeEnd { get; set; }
        public int EBPopulation { get; set; }
        public int EBSource { get; set; }
        public int EBVenueID { get; set; }

    }

    public static class ExtensionMethods
    {
        public static List<T> MapTableToList<T>(this DataTable table) where T : new()
        {
            List<T> result = new List<T>();
            var Type = typeof(T);

            foreach (DataRow row in table.Rows)
            {
                T item = new T();
                foreach (var property in Type.GetProperties())
                {
                    property.SetMethod.Invoke(item, new object[] { row[table.Columns[property.Name]] });
                }
                result.Add(item);
            }

            return result;
        }
    }

}
