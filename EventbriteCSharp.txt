using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EventbriteNET;
using System.Net.Http;
using System.Net;
using System.IO;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Data.SqlClient;
using System.Data;

namespace EventbriteCSharp
{

    class EventBrite
    {
        static void Main(string[] args)
        {
            var rad = 10000;
            double lat = 38.9339;
            double longt = -77.1773;
            var date = "2017-07-22";
            var timeH = "15";
            var timeM = "00";
            
            var data = GetSetData(rad, lat, longt, date, timeH, timeM);
            var datares = ReturnListModel(lat, longt, date, timeH, timeM);

            Console.ReadKey();
        }


        //receive data from SQL Server -> store data as the model 
        public static IList <PopulationDencityModel>  ReturnListModel (double lat, double longt, string date, string timeH, string timeM)
        {
            //'2017-07-20 15:00:00'
            var userDate = ("'" + date + " " + timeH + ":" + timeM + ":" + "00" + "'");
            
            SqlConnection conn = new SqlConnection(@"Server= LAPTOP-JDV1D5J5\SQLEXPRESS; Database=EventBriteData; User Id=sa; Password = 1234;");
            
            string querySelect = string.Format("Declare @stdatetime datetime=" + userDate + "; " + "SELECT * FROM EventBTable" +
                " Where @stdatetime between EBTimeStart and  EBTimeEnd;");
            /*  
                "Declare @stdatetime datetime=" + stDate + ";" + "SELECT * FROM EventBTable" +
                "Where @stdatetime between EBTimeStart and  EBTimeEnd;"
            */

            SqlCommand cmd = new SqlCommand(querySelect, conn);
            conn.Open();

            // create data adapter
            SqlDataAdapter dataAdapt = new SqlDataAdapter(cmd);

            //query your database and return the result to your datatable
            DataTable dataTable = new DataTable();
            dataAdapt.Fill(dataTable);

            conn.Close();
            dataAdapt.Dispose();

            var popupDens = dataTable.MapTableToList<PopulationDencityModel>();
            Console.WriteLine("Selecting Data Successfully");
            return popupDens;
        }

        //function which to receive data from Eventbrite API and to store this data to SQL Server
        public static string[] GetSetData(double rad, double lat, double longt, string date, string timeH, string timeM)
        {
            double radius = 100; // = ConvertMetersToMiles(rad);  //converting meters -> to miles

            //2017-07-20T09:42:54Z
            var plushour = 24;
            var minushour = -12;
            var userDate = Convert.ToDateTime(date + " " + timeH + ":" + timeM + ":" + "00");
            string stDate = (userDate.AddHours(minushour)).ToString("yyyy-MM-ddTHH:mm:ssZ"); // converted start datetime
            string endDate = (userDate.AddHours(plushour)).ToString("yyyy-MM-ddTHH:mm:ssZ"); // converted end datetime

            var token = "2NEWI72RJPV4KP2G64V3";
            //https://www.eventbriteapi.com/v3/events/search/?expand=venue,location.within=100mi&location.latitude=38.9339&location.longitude=-77.1773&start_date.range_start=2017-07-19T09%3A42%3A54Z&&token=2NEWI72RJPV4KP2G64V3
            string url = "https://www.eventbriteapi.com/v3/events/search/?expand=venue," + "location.within=" + radius + "mi" + "&location.latitude=" + lat + "&location.longitude="
               + longt + "&start_date.range_start=" + stDate + "&start_date.range_end=" + endDate + "&token=" + token;
            // Creating an object of WebClient 
            using (var webClient = new WebClient())
            {
                // Give the key to get acces 
                webClient.Headers.Add("Authorization", "Bearer 2NEWI72RJPV4KP2G64V3");
                //Execute the query at the provided address and get a response from Eventbrite API as a string
                string response = webClient.DownloadString(url);

                //Connect to database, where the data will be stored
                SqlConnection conn = new SqlConnection(@"Server= LAPTOP-JDV1D5J5\SQLEXPRESS; Database=EventBriteData; User Id=sa; Password = 1234;");
                conn.Open();

                //extracting capacity, startdate & enddate
                var capacity = JObject.Parse(response)["events"].Select(v => (int)v["capacity"]).ToList();
                var timeStart = JObject.Parse(response)["events"].Select(v => (DateTime)v["start"]["local"]).ToList();
                var timeEnd = JObject.Parse(response)["events"].Select(v => (DateTime)v["end"]["local"]).ToList();
                var venueId = JObject.Parse(response)["events"].Select(v => (int)v["venue_id"]).ToList();
                var venueLat = JObject.Parse(response)["events"].Select(v => (double)v["venue"]["address"]["latitude"]).ToList();
                var venueLongt = JObject.Parse(response)["events"].Select(v => (double)v["venue"]["address"]["longitude"]).ToList();

                string[] respArr = new string[capacity.Count];
                string queryClean = ("TRUNCATE TABLE EventBTable");
                SqlCommand comd = new SqlCommand(queryClean, conn);
                comd.ExecuteNonQuery();

                // Recording received elements to SLQ 
                for (int i = 0; i < capacity.Count; i++)
                {
                    respArr[i] = (" date & time start " + timeStart[i] + " date & time end " + timeEnd[i] + " lat = " + lat + " longt = " + longt + " people = " + capacity[i]);

                    string queryInsert = "INSERT into EventBTable (EBLat, EBLongt, EBTimeStart, EBTimeEnd, EBPopulation, EBSource, EBVenueID )" +
                                   "VALUES (" + venueLat[i] + ", " + venueLongt[i] + ", '" + timeStart[i].ToString("yyyy-MM-dd HH:mm:ss") + "', '" + timeEnd[i].ToString("yyyy-MM-dd HH:mm:ss") + "', " + capacity[i] + ", " + "3, " + venueId[i] + ")";

                    SqlCommand cmd = new SqlCommand(queryInsert, conn);
                    cmd.ExecuteNonQuery();                 
                }

                Console.WriteLine("Inserting Data Successfully");
                string queryUpdate = ("UPDATE EventBTable SET GeoLocation = geography::STPointFromText('POINT(' + CAST(EBLongt AS VARCHAR(20)) + ' ' + CAST(EBLat AS VARCHAR(20)) + ')', 4326)");
                
                SqlCommand upd = new SqlCommand(queryUpdate, conn);
                upd.ExecuteNonQuery();
                Console.WriteLine("Updating Data Successfully");

                conn.Close();
                return respArr;
            }   
        }
        public static double ConvertMetersToMiles(double meters)
        {
            return (meters / 1609.344);
        }
    }



    //Class Model in which data from SQL will be store 
    public class PopulationDencityModel
    {
        public int ID { get; set; }
        public double EBLat { get; set; }
        public double EBLongt { get; set; }
        public DateTime EBTimeStart { get; set; }
        public DateTime EBTimeEnd { get; set; }
        public int EBPopulation { get; set; }
        public int EBSource { get; set; }
        public int EBVenueID { get; set; }
       // public float GeoLocation { get; set; }
        /*
         var text = string.Format("POINT({0} {1})", currentLatitude, currentLongitude);
        DbGeography geo = DbGeography.FromText(text, 4326);
        results = query.OrderBy(c => c.Posizione.Distance(geo)).ToList();

    */

    }

    public static class ExtensionMethods
    {
        public static List<T> MapTableToList<T>(this DataTable table) where T : new()
        {
            List<T> result = new List<T>();
            var Type = typeof(T);

            foreach (DataRow row in table.Rows)
            {
                T item = new T();
                foreach (var property in Type.GetProperties())
                {
                    property.SetMethod.Invoke(item, new object[] { row[table.Columns[property.Name]] });
                }
                result.Add(item);
            }

            return result;
        }
    }

}
